// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model ARTDrugOrder {
  id              String              @id @default(uuid()) @db.Uuid
  patient         Json
  appointment     Json?
  eventId         String?             @db.Uuid
  event           ARTEvent?           @relation(fields: [eventId], onDelete: SetNull, references: [id])
  deliveryAddress Json
  deliveryMethod  OrderDeliveryMethod
  courierService  Json?
  deliveryPerson  Json?
  phoneNumber     String
  type            OrderType
  orderedBy       Json
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deliveries      ARTDrugDelivery[]
}

model ARTDrugDelivery {
  id              String         @id @default(uuid()) @db.Uuid
  orderId         String?        @db.Uuid
  order           ARTDrugOrder?  @relation(fields: [orderId], onDelete: SetNull, references: [id])
  patient         Json //Subscriber
  services        String[]       @default([])
  method          DeliveryMethod
  courierService  Json?
  deliveryPerson  Json?
  deliveryAddress Json?
  eventId         String?        @db.Uuid
  event           ARTEvent?      @relation(fields: [eventId], onDelete: SetNull, references: [id])
  initiatedBy     Json
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model ARTEvent {
  id                        String             @id @default(uuid()) @db.Uuid
  title                     String
  distributionTime          DateTime
  distributionVenue         String
  remiderNortificationDates DateTime[]         @default([])
  groupId                   String             @db.Uuid
  group                     ARTGroup           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  remarks                   String?             @db.Text
  orders                    ARTDrugOrder[]
  deliveries                ARTDrugDelivery[]
  feedBacks                 ARTEventFeedBack[]
}

model ARTEventFeedBack {
  id                    String    @id @default(uuid()) @db.Uuid
  eventId               String?   @db.Uuid
  event                 ARTEvent? @relation(fields: [eventId], onDelete: SetNull, references: [id])
  confirmedAttendance   Boolean
  requestedHomeDelivery Boolean
  note                  String?   @db.Text
  // orderId             String?       @db.Uuid
  // order               ARTDrugOrder? @relation(fields: [orderId], onDelete: SetNull, references: [id])
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model ARTGroup {
  id               String                   @id @default(uuid()) @db.Uuid
  title            String
  description      String?                  @db.Text
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  events           ARTEvent[]
  extraSubscribers Json
  enrollments      ARTGroupUserEnrollment[]
}

model ARTGroupUserEnrollment {
  id         String   @id @default(uuid()) @db.Uuid
  groupId    String   @db.Uuid
  group      ARTGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user       Json
  isAdmin    Boolean  @default(false)
  publicName String?
  isCurrent  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum OrderDeliveryMethod {
  in_parcel
  in_person
}

enum OrderType {
  self
  other
}

enum DeliveryMethod {
  self
  courier
  patient_preference
}
